%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function phi  = DCT_TIE_solver(dIdz,I0,pixelsize,k,r,threshold,reduced_region_size)
% function phi = DCT_TIE_solver(dIdz,I0,det,pixelsize,k,r)
% Purpose: Solution to TIE using DCT-based Possion solver with Neumann
% boundary condition generated by a hard-aperture
%'Inputs': 'dIdz',Intensity derivative along optical axis;
%          'I0', Infoucs intensity image 
%          'pixelsize'£¬pixelsize('mm'); 
%          'k',Wavenumber
%          'r',regularzation parameter (to remove low-frequency noise)
%              'threshold', intensity threshold to prevent intensity zeros (%
%               of the maximam value of the intensity distribution (recommended
%               value 0.01)
%          'reduced_region_size',the valid phase region ¦¸ (reduced by 'reduced_region_size'
%                                from each side of the region, used to enclose all the 
%                                escaped boundary signal when the defocusing is large)
%'Outputs': 'phi',object phase map; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Citation for this algorithm:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% C. Zuo, Q. Chen, and A. Asundi, 
% "Boundary-artifact-free phase retrieval with the transport of intensity 
%  equation: fast solution with use of discrete cosine transform," 
% Optics Express 22, 9220-9244 (2014).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Version 2.0 - 
% Coded by Chao Zuo - 2013-11-19   
% Lastest edited by Chao Zuo - 2014-3-9 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

dIdz_double=[dIdz,fliplr(dIdz)];
dIdz_double=[dIdz_double',(flipud(dIdz_double))']';

I0_double=[I0,fliplr(I0)];
I0_double=[I0_double',(flipud(I0_double))']';


[M,N]=size(dIdz_double);
n=1:N;
m=1:M;
L0X=pixelsize*M;
L0Y=pixelsize*N;

v=(-M/L0X/2+1/L0X*(m-1));
u=(-N/L0Y/2+1/L0Y*(n-1));

[uu,vv] = meshgrid(u,v); 

kdIdz_double=-k*dIdz_double;

Fleft=fft2(kdIdz_double);

Fphi=fftshift(Fleft).*(-4*pi*pi*(uu.*uu+vv.*vv))./(r+(-4*pi*pi*(uu.*uu+vv.*vv)).^2);
bigphi=real(ifft2(fftshift(Fphi)));

if(reduced_region_size==0)
Fbigphi=fft2(bigphi);

Fphi=fftshift(Fbigphi).*(2*1i*pi*(uu));
dxbigphi=real(ifft2(fftshift(Fphi)));


Fphi=fftshift(Fbigphi).*(2*1i*pi*(vv));
dybigphi=real(ifft2(fftshift(Fphi)));

I0_double(find(I0_double<threshold*max(max(I0_double))))=threshold*max(max(I0_double));

dxbigphi=dxbigphi./I0_double;
dybigphi=dybigphi./I0_double;


Fbigphi=fft2(dxbigphi);
Fphi=fftshift(Fbigphi).*(2*1i*pi*(uu));
dxdxbigphi=real(ifft2(fftshift(Fphi)));


Fbigphi=fft2(dybigphi);
Fphi=fftshift(Fbigphi).*(2*1i*pi*(vv));
dydybigphi=real(ifft2(fftshift(Fphi)));

ddphi=dxdxbigphi+dydybigphi;

Fleft=fft2(ddphi);
Fphi=fftshift(Fleft).*(-4*pi*pi*(uu.*uu+vv.*vv))./(r+(-4*pi*pi*(uu.*uu+vv.*vv)).^2);

phi=real(ifft2(fftshift(Fphi)));
phi=phi(1:end/2,1:end/2);

else
bigphi=bigphi(1:end/2,1:end/2);
bigphi=bigphi((1+reduced_region_size):(end-reduced_region_size),(1+reduced_region_size):(end-reduced_region_size));

bigphi_double=[bigphi,fliplr(bigphi)];
bigphi_double=[bigphi_double',(flipud(bigphi_double))']';

I0=I0((1+reduced_region_size):(end-reduced_region_size),(1+reduced_region_size):(end-reduced_region_size));
I0_double=[I0,fliplr(I0)];
I0_double=[I0_double',(flipud(I0_double))']';

[M,N]=size(I0_double);
n=1:N;
m=1:M;
L0X=pixelsize*M;
L0Y=pixelsize*N;

v=(-M/L0X/2+1/L0X*(m-1));
u=(-N/L0Y/2+1/L0Y*(n-1));

[uu,vv] = meshgrid(u,v); 

Fbigphi=fft2(bigphi_double);

Fphi=fftshift(Fbigphi).*(2*1i*pi*(uu));
dxbigphi=real(ifft2(fftshift(Fphi)));


Fphi=fftshift(Fbigphi).*(2*1i*pi*(vv));
dybigphi=real(ifft2(fftshift(Fphi)));

I0(find(I0<threshold*max(max(I0))))=threshold*max(max(I0));

dxbigphi=dxbigphi./I0_double;
dybigphi=dybigphi./I0_double;


Fbigphi=fft2(dxbigphi);
Fphi=fftshift(Fbigphi).*(2*1i*pi*(uu));
dxdxbigphi=real(ifft2(fftshift(Fphi)));


Fbigphi=fft2(dybigphi);
Fphi=fftshift(Fbigphi).*(2*1i*pi*(vv));
dydybigphi=real(ifft2(fftshift(Fphi)));

ddphi=dxdxbigphi+dydybigphi;

Fleft=fft2(ddphi);
Fphi=fftshift(Fleft).*(-4*pi*pi*(uu.*uu+vv.*vv))./(r+(-4*pi*pi*(uu.*uu+vv.*vv)).^2);

phi=real(ifft2(fftshift(Fphi)));
phi=phi(1:end/2,1:end/2);

end